<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zhou Zhuming&#39;s blogs</title>
  
  <subtitle>你必须非常努力，才能看起来毫不费力。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-04-24T06:30:15.640Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Zhou Zhuming</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Git常用命令整理</title>
    <link href="http://yoursite.com/2018/04/24/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%95%B4%E7%90%86/"/>
    <id>http://yoursite.com/2018/04/24/Git常用命令整理/</id>
    <published>2018-04-24T02:25:17.000Z</published>
    <updated>2018-04-24T06:30:15.640Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言碎碎念"><a href="#前言碎碎念" class="headerlink" title="前言碎碎念"></a>前言碎碎念</h2><p>自从使用Git作为版本控制工具以来，通过教程学习、手册查阅方式了解了Git的相关原理和Git的命令，能够顺利使用。但由于还不熟练，实践经验也还不够丰富，每次遇到问题都需要重新搜索，多次下来十分麻烦。另一方面，查阅手册往往是不够的，因为手册只会告诉你什么命令做什么用，不会根据不同场景告诉你应该用什么命令。</p><p>所以在这篇文章中，我将常用的Git命令根据不同的使用场景做一个整理，加深印象的同时也方便自己日后进行查阅。</p><hr><h2 id="四个概念"><a href="#四个概念" class="headerlink" title="四个概念"></a>四个概念</h2><p>这里借用阮一峰老师的文章<a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html" target="_blank" rel="noopener">《常用Git命令清单》</a>中的图。<br><img src="/2018/04/24/Git常用命令整理/1.png" alt="Git"></p><p>几个专有名词的译名如下：</p><ul><li>Workspace: 工作区，也就是正在编辑的文件目录</li><li>Index / Stage: 暂存区</li><li>Repository: 本地仓库，.git文件夹管理的版本库</li><li>Remote: 远程仓库，也就是github.com上面的仓库</li></ul><p>例如，在最常用的命令串中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git add &lt;file&gt;</span><br><span class="line"><span class="comment">#添加工作区指定文件的改动到暂存区，"&lt;file&gt;"为"."时添加全部文件</span></span><br><span class="line"></span><br><span class="line">$ git commit -m <span class="string">"XXXX"</span></span><br><span class="line"><span class="comment">#提交暂存区的所有内容到本地仓库的当前分支</span></span><br><span class="line"></span><br><span class="line">$ git push -u origin master</span><br><span class="line"><span class="comment">#上传本地仓库到已关联的远程仓库</span></span><br></pre></td></tr></table></figure><hr><h2 id="建立工程"><a href="#建立工程" class="headerlink" title="建立工程"></a>建立工程</h2><p>在工作目录中建立与远程仓库关联的Git工程主要有两种情况：第一种是由本地上传到远程仓库；第二种是从远程仓库克隆到本地。</p><h3 id="本地上传"><a href="#本地上传" class="headerlink" title="本地上传"></a>本地上传</h3><p>在这种情况下，远程仓库应该是没有工程的。在本地工程文件夹下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br><span class="line"><span class="comment">#初始化一个Git仓库，此时当前目录会增加一个.git文件夹(此文件夹默认是隐藏的)，当前文件夹受到Git的管理，并默认创建master分支</span></span><br><span class="line"></span><br><span class="line">$ git add &lt;file&gt;</span><br><span class="line"><span class="comment">#添加指定文件到暂存区，"&lt;file&gt;"为"."时表明添加当前目录的所有文件到暂存区</span></span><br><span class="line"></span><br><span class="line">$ git remote add origin &lt;url&gt;</span><br><span class="line"><span class="comment">#为当前项目添加远程主机。</span></span><br><span class="line"><span class="comment">#其中origin为自定义的远程主机名，url为远程主机的地址（推荐采用ssh协议）</span></span><br></pre></td></tr></table></figure><p>此时已经建立了本地仓库与远程仓库的关联，可以通过<code>git push</code>推送上传。<br>第一次推送采用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git push -u origin master</span><br><span class="line"><span class="comment">#将本地master分支推送到远程同名分支（若不存在则新建），同时-u指定origin为默认主机名，之后若要上传到origin可省略它。</span></span><br></pre></td></tr></table></figure><h3 id="远程克隆"><a href="#远程克隆" class="headerlink" title="远程克隆"></a>远程克隆</h3><p>这种情况下，远程仓库已经有工程，只需要在本地工程文件夹下用<code>git clone</code>命令克隆：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> &lt;url&gt;</span><br></pre></td></tr></table></figure><p>此时本地仓库已经与对应远程仓库建立关联，为主机名<code>origin</code>的地址。</p><h3 id="克隆其他分支"><a href="#克隆其他分支" class="headerlink" title="克隆其他分支"></a>克隆其他分支</h3><p><code>git clone</code>命令默认克隆远程项目的<code>master</code>分支及其历史，若还需克隆别的分支，可通过以下方式进行（以克隆dev分支为例）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b dev origin/dev</span><br><span class="line"><span class="comment">#检出origin下的dev分支到本地新建的dev分支，并建立本地分支与远程分支的追踪关系</span></span><br></pre></td></tr></table></figure><p>或者：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b dev</span><br><span class="line"><span class="comment">#新建并切换到本地分支dev</span></span><br><span class="line"></span><br><span class="line">$ git branch --<span class="built_in">set</span>-upstream-to=origin/dev dev</span><br><span class="line"><span class="comment">#建立origin/dev远程分支和dev本地分支的追踪关系</span></span><br><span class="line"></span><br><span class="line">$ git pull</span><br><span class="line"><span class="comment">#拉取本地分支dev对应的远程分支的最新状态</span></span><br></pre></td></tr></table></figure><h3 id="托管到新的远程仓库"><a href="#托管到新的远程仓库" class="headerlink" title="托管到新的远程仓库"></a>托管到新的远程仓库</h3><p>在克隆需要的内容后，有时会希望托管到新的远程仓库。<br>此时可以增加新的远程主机名:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add &lt;new_remote_name&gt; &lt;url&gt;</span><br></pre></td></tr></table></figure><p>或者干脆更改原来<code>origin</code>的地址：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote origin <span class="built_in">set</span>-url &lt;url&gt;</span><br></pre></td></tr></table></figure><hr><h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><h3 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br><span class="line"><span class="comment">#查看本地分支</span></span><br><span class="line"></span><br><span class="line">$ git branch -r</span><br><span class="line"><span class="comment">#查看远程分支</span></span><br><span class="line"></span><br><span class="line">$ git branch -a</span><br><span class="line"><span class="comment">#查看所有本地分支和远程分支</span></span><br></pre></td></tr></table></figure><h3 id="新建本地分支"><a href="#新建本地分支" class="headerlink" title="新建本地分支"></a>新建本地分支</h3><p>新建分支（不切换）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch &lt;new_branch&gt;</span><br></pre></td></tr></table></figure><p>新建分支并切换到新分支：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b &lt;new_branch&gt;</span><br><span class="line"><span class="comment">#相当于：</span></span><br><span class="line">$ git branch &lt;new_branch&gt;</span><br><span class="line">$ git checkout &lt;new_branch&gt;</span><br></pre></td></tr></table></figure><h3 id="删除本地分支"><a href="#删除本地分支" class="headerlink" title="删除本地分支"></a>删除本地分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -d &lt;branch&gt;</span><br><span class="line"><span class="comment">#删除分支前检查该分支是否有未提交或者未合并的内容</span></span><br><span class="line"></span><br><span class="line">$ git branch -D &lt;branch&gt;</span><br><span class="line"><span class="comment">#强制删除该分支</span></span><br></pre></td></tr></table></figure><h3 id="新建远程分支"><a href="#新建远程分支" class="headerlink" title="新建远程分支"></a>新建远程分支</h3><p>相当于把远程未添加的本地分支push到远程：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin &lt;local_branch&gt;:&lt;remote_branch&gt;</span><br><span class="line"><span class="comment">#建议远程与本地分支同名，同名时可省略远程分支名</span></span><br></pre></td></tr></table></figure><h3 id="删除远程分支"><a href="#删除远程分支" class="headerlink" title="删除远程分支"></a>删除远程分支</h3><p>相当于<code>push</code>一个本地的空分支：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin :&lt;remote_branch&gt;</span><br><span class="line"><span class="comment">#本地分支为空</span></span><br></pre></td></tr></table></figure><p>或者用<code>--delete</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin --delete &lt;remote_branch&gt;</span><br></pre></td></tr></table></figure><h3 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git merge &lt;branch&gt;</span><br><span class="line"><span class="comment">#快进合并（指针指向改变），合并&lt;branch&gt;到当前分支</span></span><br><span class="line"></span><br><span class="line">$ git merge --no-ff &lt;branch&gt;</span><br><span class="line"><span class="comment">#合并&lt;branch&gt;到当前分支，在当前分支生成新节点，保证每个分支的独立演变史</span></span><br></pre></td></tr></table></figure><hr><h2 id="撤销与版本回退"><a href="#撤销与版本回退" class="headerlink" title="撤销与版本回退"></a>撤销与版本回退</h2><h3 id="撤销工作区修改"><a href="#撤销工作区修改" class="headerlink" title="撤销工作区修改"></a>撤销工作区修改</h3><p>有时修改工作区后，发现修改错误，希望回到原来未修改时（上一次提交或暂存）的状态。可以采用<code>git checkout</code>命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git diff</span><br><span class="line"><span class="comment">#查看工作区未提交（或为暂存）的文件的具体修改</span></span><br><span class="line"></span><br><span class="line">$ git checkout -- &lt;file&gt;</span><br><span class="line"><span class="comment">#恢复工作区指定文件到上一次提交（或暂存）状态</span></span><br><span class="line">$ git checkout .</span><br><span class="line"><span class="comment">#撤销所有工作区修改</span></span><br></pre></td></tr></table></figure><h3 id="撤销暂存"><a href="#撤销暂存" class="headerlink" title="撤销暂存"></a>撤销暂存</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git reset HEAD &lt;file&gt;</span><br><span class="line"><span class="comment">#将指定文件撤出暂存区</span></span><br></pre></td></tr></table></figure><h3 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h3><p>希望将版本库回退到之前的提交时，采用<code>git reset</code>命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span></span><br><span class="line"><span class="comment">#查看之前的版本提交记录</span></span><br><span class="line"></span><br><span class="line">$ git reset HEAD^</span><br><span class="line"><span class="comment">#回退到上一个提交版本，^^代表上两个版本，以此类推。（也可以用~2等代替）</span></span><br><span class="line">或</span><br><span class="line">$ git reset &lt;commitID&gt;</span><br><span class="line"><span class="comment">#commitID可由git log查看得到</span></span><br></pre></td></tr></table></figure><p>有必要整理一下<code>git reset</code>命令的三个参数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --soft HEAD^</span><br><span class="line"><span class="comment">#重置版本库头指针，且将这次提交之后的所有变更移动到暂存区</span></span><br><span class="line"></span><br><span class="line">$ git reset --mixed HEAD^</span><br><span class="line"><span class="comment">#默认参数，等同于 git reset HEAD^</span></span><br><span class="line"><span class="comment">#重置版本库头指针和暂存区，即这次提交之后的所有更改都留在工作区</span></span><br><span class="line"></span><br><span class="line">$ git reset --hard HEAD^</span><br><span class="line"><span class="comment">#重置版本库头指针、暂存区和工作区，即这次提交之后的所有更改都不在存在于当前状态</span></span><br></pre></td></tr></table></figure><p>在没有将之后的提交推送到远程仓库的情况下，<code>git reset --hard</code>是个很危险的操作。若是已经推送到远程仓库，使用<code>git pull</code>可以重新获得之后的版本提交。<br>若是在没有远程备份时使用<code>--hard</code>进行版本回退，又想恢复到之后的版本，在一定时间内（一般为30天）可以通过<code>git reflog</code>查看操作id，再使用<code>git reset --hard &lt;ID&gt;</code>恢复。</p><h3 id="stash储藏"><a href="#stash储藏" class="headerlink" title="stash储藏"></a>stash储藏</h3><p>有时手头的工作进行到一半，需要切换分支做一些其他事情，可以采用<code>git stash</code>命令将当前的工作区储藏起来。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ git stash</span><br><span class="line"><span class="comment">#储藏当前工作区</span></span><br><span class="line"></span><br><span class="line">$ git stash list</span><br><span class="line"><span class="comment">#查看当前的stash储藏栈</span></span><br><span class="line"></span><br><span class="line">$ git stash apply</span><br><span class="line"><span class="comment">#应用栈顶的储藏内容，恢复工作区到之前的储藏状态</span></span><br><span class="line">$ git stash apply stash@&#123;2&#125;</span><br><span class="line"><span class="comment">#应用指定储藏内容</span></span><br><span class="line"></span><br><span class="line">$ git stash pop</span><br><span class="line"><span class="comment">#与apply类似，但从栈中删除该储藏内容</span></span><br></pre></td></tr></table></figure><hr><h2 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h2><p>待续。。。。。。</p><hr><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="状态查看"><a href="#状态查看" class="headerlink" title="状态查看"></a>状态查看</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br></pre></td></tr></table></figure><p>任何情况下都可以使用<code>git status</code>命令查看当前的版本控制状态（包括工作区、暂存区、仓库区），并给出当前状态下可能会用到的命令提示。<br>经常使用该命令是好习惯。</p><h3 id="配置git用户"><a href="#配置git用户" class="headerlink" title="配置git用户"></a>配置git用户</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git config user.name <span class="string">"your name"</span></span><br><span class="line">$ git config user.email <span class="string">"email@example.com"</span></span><br><span class="line"><span class="comment">#配置当前目录的git用户，加上--config参数时配置这台机器的所有git仓库</span></span><br></pre></td></tr></table></figure><h3 id="协议更改"><a href="#协议更改" class="headerlink" title="协议更改"></a>协议更改</h3><p>有时版本克隆是采用的是https协议，以至于每一次提交都需要输入用户名密码，很麻烦。而使用ssh协议就会方便很多，需要将当前的仓库协议进行更换。<br>事实上，重置远程仓库名为ssh协议地址就可以了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote origin <span class="built_in">set</span>-url git@example.com....</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言碎碎念&quot;&gt;&lt;a href=&quot;#前言碎碎念&quot; class=&quot;headerlink&quot; title=&quot;前言碎碎念&quot;&gt;&lt;/a&gt;前言碎碎念&lt;/h2&gt;&lt;p&gt;自从使用Git作为版本控制工具以来，通过教程学习、手册查阅方式了解了Git的相关原理和Git的命令，能够顺利使用。但
      
    
    </summary>
    
      <category term="杂" scheme="http://yoursite.com/categories/%E6%9D%82/"/>
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
      <category term="Bash" scheme="http://yoursite.com/tags/Bash/"/>
    
  </entry>
  
  <entry>
    <title>如何更改Github上面托管的项目的默认显示语言</title>
    <link href="http://yoursite.com/2018/04/22/%E5%A6%82%E4%BD%95%E6%9B%B4%E6%94%B9Github%E4%B8%8A%E9%9D%A2%E6%89%98%E7%AE%A1%E7%9A%84%E9%A1%B9%E7%9B%AE%E7%9A%84%E9%BB%98%E8%AE%A4%E6%98%BE%E7%A4%BA%E8%AF%AD%E8%A8%80/"/>
    <id>http://yoursite.com/2018/04/22/如何更改Github上面托管的项目的默认显示语言/</id>
    <published>2018-04-22T10:41:32.000Z</published>
    <updated>2018-04-23T06:24:25.488Z</updated>
    
    <content type="html"><![CDATA[<p>最近将自己一门课的课程大作业，也算是一个小项目demo，放到了GitHub上面，由于项目里面包含许多下载的html文件，导致html代码远远的超过自己写的python代码，于是GitHub默认也就显示是html。</p><p>这种对于我这种有强迫症的人来说，简直就是不能忍受的。于是我就各种上网找解决方案。终于，在不懈的努力之后，让我给找到了，在这里分享给大家。</p><p>导致这种情况的主要原因是GitHub是使用Linguist来检测你的项目所使用的语言，Linguist具体的作用我个人猜测应该就是：统计你这个项目里面哪一种语言的代码量最多，就把这种语言作为当前这个项目的主语言,也就是默认显示语言。这种做法显然是很不合理的，你比如像python这种支持函数式编程而且崇尚语法简洁优雅的解释型脚本语言，它的代码量远远比不过其他的编译型语言(比如C/C++/Java)。</p><p>那么到底如何来解决这个问题呢？解决办法如下：</p><font face="微软雅黑" size="3" color="red">使用.gitattributes配置文件</font><p><strong> 具体做法是这样的：在你的GitHub代码仓库的根目录界面新建一个.gitattributes配置文件，如下图所示：</strong></p><p><img src="/2018/04/22/如何更改Github上面托管的项目的默认显示语言/1.png" alt="Github"></p><p>然后打开这个文件：把默认的显示语言（也就是统计的代码量最多的语言）全部改成你这个项目本来的语言。例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*.js linguist-language=Python　　</span><br><span class="line">*.css linguist-language=Python　　　</span><br><span class="line">*.html linguist-language=Python</span><br></pre></td></tr></table></figure><font face="微软雅黑" size="3" color="red">这几行代码的意思就是说：将以.js , .css , .html 为扩展名的文件都按照Python语言来统计。就是这么简单。这么直接！！！</font><p>好了，改完这些之后保存，再回到GitHub主界面就会看到默认的展示语言已经变成python了。主要的步骤就是这样，希望能够帮助到大家。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近将自己一门课的课程大作业，也算是一个小项目demo，放到了GitHub上面，由于项目里面包含许多下载的html文件，导致html代码远远的超过自己写的python代码，于是GitHub默认也就显示是html。&lt;/p&gt;
&lt;p&gt;这种对于我这种有强迫症的人来说，简直就是不能忍
      
    
    </summary>
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>关于惠普暗影精灵2 pro用一段时间之后，插上电源充不了电的问题</title>
    <link href="http://yoursite.com/2018/04/22/%E5%85%B3%E4%BA%8E%E6%83%A0%E6%99%AE%E6%9A%97%E5%BD%B1%E7%B2%BE%E7%81%B52-pro%E7%94%A8%E4%B8%80%E6%AE%B5%E6%97%B6%E9%97%B4%E4%B9%8B%E5%90%8E%EF%BC%8C%E6%8F%92%E4%B8%8A%E7%94%B5%E6%BA%90%E5%85%85%E4%B8%8D%E4%BA%86%E7%94%B5%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2018/04/22/关于惠普暗影精灵2-pro用一段时间之后，插上电源充不了电的问题/</id>
    <published>2018-04-22T06:33:59.000Z</published>
    <updated>2018-04-23T06:24:50.913Z</updated>
    
    <content type="html"><![CDATA[<p>去年5月份换的新电脑，用到现在大半年了。近几天来突然发现电脑插上电源充不了电，关机重启啥的都没有效果，于是尝试着上网找各种解决方案，终于，在试了N种解决方案之后，终于让我成功地找到了解决问题的办法。现在将我的解决方案分享出来，希望对大家有所帮助。</p><p>具体的操作步骤（<strong>仅针对惠普电脑，其他品牌的电脑不敢保证，不过个人觉得应该差不多</strong>）如下：</p><hr><ol><li><p>先将电脑关机；</p></li><li><p>在关机状态下按住键盘上的windows和V键；</p></li><li><p>再按住上面的两个键的同时，不松开，再按住电源键，三个键同时按住不放2-3秒钟；</p></li><li><p>松开全部的按键；</p></li><li><p>按电源键开机，看是否会进入一个Bios设置界面，即是否会提示502，如果提示的话则表示操作成功；</p></li><li><p>再重新启动电脑一次，问题即可解决。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;去年5月份换的新电脑，用到现在大半年了。近几天来突然发现电脑插上电源充不了电，关机重启啥的都没有效果，于是尝试着上网找各种解决方案，终于，在试了N种解决方案之后，终于让我成功地找到了解决问题的办法。现在将我的解决方案分享出来，希望对大家有所帮助。&lt;/p&gt;
&lt;p&gt;具体的操作步
      
    
    </summary>
    
      <category term="电脑诊断" scheme="http://yoursite.com/categories/%E7%94%B5%E8%84%91%E8%AF%8A%E6%96%AD/"/>
    
    
      <category term="computer hardware" scheme="http://yoursite.com/tags/computer-hardware/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/04/21/hello-world/"/>
    <id>http://yoursite.com/2018/04/21/hello-world/</id>
    <published>2018-04-21T09:39:15.947Z</published>
    <updated>2018-04-23T06:08:57.846Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
</feed>
